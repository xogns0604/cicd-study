pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
    }
    
    environment {
        DOCKER_IMAGE = 'your-project'
        DOCKER_TAG = "${BUILD_NUMBER}"
    }
    
    triggers {
        githubPush()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                sh '''
                    chmod +x ./gradlew
                    ./gradlew clean build -x test
                '''
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }
        
        stage('Docker Deploy') {
            steps {
                sh '''
                    # 기존 컨테이너 중지 및 제거
                    docker ps -f name=your-project -q | xargs --no-run-if-empty docker stop
                    docker ps -a -f name=your-project -q | xargs --no-run-if-empty docker rm
                    
                    # 새 버전 배포
                    docker run -d \
                        --name your-project \
                        -p 8080:8080 \
                        ${DOCKER_IMAGE}:${DOCKER_TAG}
                '''
            }
        }
        
        stage('Health Check') {
            steps {
                // 애플리케이션이 정상적으로 시작됐는지 확인
                sh '''
                    sleep 30  # 애플리케이션 시작 대기
                    curl -f http://localhost:8080/actuator/health || exit 1
                '''
            }
        }
    }
    
    post {
        success {
            echo 'CD Pipeline succeeded!'
        }
        failure {
            echo 'CD Pipeline failed!'
            // 실패시 이전 버전으로 롤백
            sh '''
                docker stop your-project
                docker rm your-project
                docker run -d \
                    --name your-project \
                    -p 8080:8080 \
                    ${DOCKER_IMAGE}:${BUILD_NUMBER.toInteger() - 1}
            '''
        }
        always {
            // 오래된 도커 이미지 정리 (최근 3개만 유지)
            sh '''
                docker images ${DOCKER_IMAGE} --format "{{.ID}}" | 
                sort -r | 
                tail -n +4 | 
                xargs --no-run-if-empty docker rmi
            '''
        }
    }
}
